summary(ripdata)
#Assign Project Codes given the Project IDs in ripdata to something easier to parse through
nID <- c("COSRP", "HEROW","NAPSO", "SACTO")
oID <- levels(ripdata$ProjectID)
ripdata$ProjCode <- nID[match(ripdata$ProjectID, oID)]
rm (oID, nID)
#remove useless data
ripdata <- ripdata[!grepl("UNKNOWN", ripdata$SpeciesVarietalCode),]
ripdata <- ripdata[!grepl("DEAD", ripdata$SpeciesVarietalCode),]
ripdata <- ripdata[!grepl("Not Recorded", ripdata$SpeciesVarietalCode),]
ripdata <- ripdata[!grepl("Not Recorded", ripdata$LocationName),]
ripdata <- ripdata[!ripdata$Woody_DBH_cm > 0, ]
ripdata <- ripdata[!ripdata$Woody_Height_m > 0, ]
ripdata <- read.csv("./riparian_survey.csv",header = TRUE, sep = ",")
str(ripdata)
summary(ripdata)
#Assign Project Codes given the Project IDs in ripdata to something easier to parse through
nID <- c("COSRP", "HEROW","NAPSO", "SACTO")
oID <- levels(ripdata$ProjectID)
ripdata$ProjCode <- nID[match(ripdata$ProjectID, oID)]
rm (oID, nID)
#remove useless data
ripdata <- ripdata[!grepl("UNKNOWN", ripdata$SpeciesVarietalCode),]
ripdata <- ripdata[!grepl("DEAD", ripdata$SpeciesVarietalCode),]
ripdata <- ripdata[!grepl("Not Recorded", ripdata$SpeciesVarietalCode),]
ripdata <- ripdata[!grepl("Not Recorded", ripdata$LocationName),]
ripdata <- ripdata[ripdata$Woody_DBH_cm > 0, ]
ripdata <- ripdata[ripdata$Woody_Height_m > 0, ]
ripdata <- read.csv("./riparian_survey.csv",header = TRUE, sep = ",")
str(ripdata)
summary(ripdata)
#Assign Project Codes given the Project IDs in ripdata to something easier to parse through
nID <- c("COSRP", "HEROW","NAPSO", "SACTO")
oID <- levels(ripdata$ProjectID)
ripdata$ProjCode <- nID[match(ripdata$ProjectID, oID)]
rm (oID, nID)
#remove useless data
ripdata <- ripdata[!grepl("UNKNOWN", ripdata$SpeciesVarietalCode),]
ripdata <- ripdata[!grepl("DEAD", ripdata$SpeciesVarietalCode),]
ripdata <- ripdata[!grepl("Not Recorded", ripdata$SpeciesVarietalCode),]
ripdata <- ripdata[!grepl("Not Recorded", ripdata$LocationName),]
ripdata <- ripdata[ripdata$Woody_DBH_cm > 0, ]
ripdata <- ripdata[ripdata$Woody_Height_m > 0, ]
#ripdata <- droplevels(ripdata)
ProjLoc <- aggregate(cbind(Longitude,Latitude) ~ ProjCode,data=ripdata, mean)
MeasData <- aggregate(cbind(Woody_DBH_cm,Woody_Height_m) ~ ProjCode,data=ripdata, mean)
View(MeasData)
?levels
levels(ripdata$ProjCode)
View(ripdata)
summary(ripdata$ProjCode)
str(ripdata$ProjCode)
ripdata <- read.csv("./riparian_survey.csv",header = TRUE, sep = ",")
str(ripdata)
summary(ripdata)
#Assign Project Codes given the Project IDs in ripdata to something easier to parse through
nID <- c("COSRP", "HEROW","NAPSO", "SACTO")
oID <- levels(ripdata$ProjectID)
ripdata$ProjCode <- as.factor(nID[match(ripdata$ProjectID, oID)])
rm (oID, nID)
#remove useless data
ripdata <- ripdata[!grepl("UNKNOWN", ripdata$SpeciesVarietalCode),]
ripdata <- ripdata[!grepl("DEAD", ripdata$SpeciesVarietalCode),]
ripdata <- ripdata[!grepl("Not Recorded", ripdata$SpeciesVarietalCode),]
ripdata <- ripdata[!grepl("Not Recorded", ripdata$LocationName),]
ripdata <- ripdata[ripdata$Woody_DBH_cm > 0, ]
ripdata <- ripdata[ripdata$Woody_Height_m > 0, ]
#ripdata <- droplevels(ripdata)
ProjLoc <- aggregate(cbind(Longitude,Latitude) ~ ProjCode,data=ripdata, mean)
MeasData <- aggregate(cbind(Woody_DBH_cm,Woody_Height_m) ~ ProjCode,data=ripdata, mean)
levels(ripdata$ProjCode)
ripdata <- read.csv("./riparian_survey.csv",header = TRUE, sep = ",")
str(ripdata)
summary(ripdata)
#Assign Project Codes given the Project IDs in ripdata to something easier to parse through
nID <- c("COSRP", "HEROW","NAPSO", "SACTO")
oID <- levels(ripdata$ProjectID)
ripdata$ProjCode <- as.factor(nID[match(ripdata$ProjectID, oID)])
rm (oID, nID)
#remove useless data
ripdata <- ripdata[!grepl("Not Recorded", ripdata$LocationName),]
ripdata <- ripdata[!(ripdata$SpeciesVarietalCode %in% c("UNKOWN", "DEAD", "Not Recorded")),]
ripdata <- ripdata[ripdata$Woody_DBH_cm > 0, ]
ripdata <- ripdata[ripdata$Woody_Height_m > 0, ]
#ripdata <- droplevels(ripdata)
ProjLoc <- aggregate(cbind(Longitude,Latitude) ~ ProjCode,data=ripdata, mean)
MeasData <- aggregate(cbind(Woody_DBH_cm,Woody_Height_m) ~ ProjCode,data=ripdata, mean)
ripdata <- read.csv("./riparian_survey.csv",header = TRUE, sep = ",")
str(ripdata)
summary(ripdata)
#Assign Project Codes given the Project IDs in ripdata to something easier to parse through
nID <- c("COSRP", "HEROW","NAPSO", "SACTO")
oID <- levels(ripdata$ProjectID)
ripdata$ProjCode <- as.factor(nID[match(ripdata$ProjectID, oID)])
rm (oID, nID)
#remove useless data
ripdata <- ripdata[!grepl("Not Recorded", ripdata$LocationName),]
ripdata <- ripdata[!grepl("Unknown", ripdata$SpeciesVarietalName),]
ripdata <- ripdata[!(ripdata$SpeciesVarietalCode %in% c("UNKOWN", "DEAD", "Not Recorded")),]
ripdata <- ripdata[ripdata$Woody_DBH_cm > 0, ]
ripdata <- ripdata[ripdata$Woody_Height_m > 0, ]
#ripdata <- droplevels(ripdata)
ProjLoc <- aggregate(cbind(Longitude,Latitude) ~ ProjCode,data=ripdata, mean)
MeasData <- aggregate(cbind(Woody_DBH_cm,Woody_Height_m) ~ ProjCode,data=ripdata, mean)
MeasData
ripdata$Genus = sapply(strsplit(as.character(ripdata$SpeciesVarietalName), " "), "[[", 1)
??frequency table
??frequency
freq.array(ripdata$Genus)
sort(ripdata$Genus)
rle(sort(ripdata$Genus))
x<-rle(sort(ripdata$Genus))
x
x = x
x[2,]
x[2]
x[1]
sort(x)
sort(x[1])
sort(x[1],decreasing = TRUE)
sort(x[1],decreasing = decreasing)
?sort
x<-dataframe(x)
x<-dataframe(x[1])
x.freq<-dataframe(x[1])
x$freq<-data.frame(x[1])
x
x$freq
x$genus <-data.frame(x[2])
x$freq
x
rle(ripdata$Genus)
x <- rle(ripdata$Genus)
x
sort(x[1])
rm x
em(x)
rm(x)
rle(ripdata$Genus)
rle(ripdata$Genus).lengths
lengths.rle(ripdata$Genus)
x = rle(ripdata$Genus)
x
x[1]
rle(sort(ripdata$Genus))
x <- rle(sort(ripdata$Genus))
x
attach(x)
x
detach(x)
x.lengths
x$lengths
sort(x$lengths)
!sort(x$lengths)
sort(x$lengths,decreasing = FALS)
sort(x$lengths,decreasing = FALSE)
sort(x$lengths,decreasing = TRUE)
y<-sort(x$lengths,decreasing = TRUE)
y
x
y <- data.frame(x)
y <- data.frame(x[1],x[2])
y
y[order(-y[,1])]
y[order(-y[,1]),]
sort(ripdata$Genus)
rle(ripdata$Genus)
values
temp <-rle(ripdata$Genus)
temp
temp$values
y<-sort(x$lengths,decreasing = TRUE)
y
y <- data.frame(x)
y <- data.frame(x[1],x[2])
y[order(-y[,1]),]
mytable <- table(y$lengths,y$values)
mytable
rm(y)
y$freq <- x[1]
y$Genus <- x[2]
y<-data.frame
y$freq <- x[1]
y$Genus <- x[2]
y
rm(y)
y<-data.frame()
y
y$freq <- x[1]
y$Genus <- x[2]
y
y<-data.frame()
y<-data.frame(x[1])
y
y$Genus <-data.frame(x[2])
y
y$Genus
y
y$values
y.values
View(y)
as.vector(x[1])
as.numeric(x[1])
as.data.frame(x)
as.data.frame(x[1])
x$lengths
x[1,2]+x[1,3]
x[1,2]
x[1 2]
x[1, 2]
x[1,]
x[1]
x[1],x[2]
as.data.frame(x[1])
head(subset(mtcars,select = 'gear'))
cars
mtcars
factor(mtcars$gear)
install.pakages('plyr')
install.packages('plyr')
library(plyr)
rm(x,y)
rm(x,y,temp)
rm(mytable)
x <- count(ripdata, 'Genus')
x
sort(x[2],decreasing = TRUE)
sort(x[2],decreasing = decreasing)
x[order(-x[,1]),]
x[order(-x[2]),]
x <- count(ripdata, 'Genus')
gfreq <- x[order(-x[2]),]
gfreq
levels(gfreq)
levels(gfreq$Genus)
levels(gfreq$freq)
View(gfreq)
View(gfreq)
View(gfreq)
gfreq$Genus[1]
gfreq$Genus[2]
head(gfreq,-5)
head(gfreq,5)
install.packages('maps')
library(maps)
?maps
??maps
demo(sp::webmap)
demo(webmap)
library(ggmap)
install.packages('ggmap')
uninstall.packages('maps')
uninstall.package('maps')
library(sp)
library(ggmap)
citation('ggmap')
demo(meuse, ask=FALSE, echo = FALSE)
merc = CRS("+init=epsg:3857")
WGS84 = CRS("+init=epsg:4326")
meuse = spTransform(meuse,WGS84)
installed.packages('spTransform')
library(spTrans)
library(spTransform)
installe.packages('spTransform')
install.packages('spTransform')
bgMap = get_map(as.vector(bbox(meuse)), source = "google", zoom = 13) # useless without zoom level
meuse = spTransform(meuse, WGS84)
# plot with ggmap-google bg:
plot(spTransform(meuse, merc), bgMap = bgMap, pch = 16, cex = .5)
?spTransform
meuse = spTransform(meuse, WGS84)
Genus ~ ProjCode
Projcode
ripdata$Projcode
ripdata$ProjCode
Genus ~ ripdata$ProjCode
ripData$Genus ~ ripdata$ProjCode
ripdata$Genus ~ ripdata$ProjCode
chisq.test(ssfreq)
ssgfreq <- head(gfreq,5)
chisq.test(ssfreq)
View(ssgfreq)
View(ssgfreq)
chisq.test(ssfreq$freq)
ssfreq$freq
ssfreq
chisq.test(ssgfreq$freq)
chisq.test(ssgfreq)
chisq.test(ssgfreq$freq)
chisq.test?
?chisq.test
installed.packages('plyr')
installed.packages('asdf')
installed.packages('asdasdfasdff')
installed.packages('plyr')
installed.packages()
utils::installed.packages
ProjLoc
ProjCode
ripdata <- read.csv("./riparian_survey.csv",header = TRUE, sep = ",")
str(ripdata)
summary(ripdata)
#Assign Project Codes given the Project IDs in ripdata to something easier to parse through
nID <- c("COSRP", "HEROW","NAPSO", "SACTO")
oID <- levels(ripdata$ProjectID)
ripdata$ProjCode <- as.factor(nID[match(ripdata$ProjectID, oID)])
rm (oID, nID)
#remove useless data
ripdata <- ripdata[!grepl("Not Recorded", ripdata$LocationName),]
ripdata <- ripdata[!grepl("Unknown", ripdata$SpeciesVarietalName),]
ripdata <- ripdata[!(ripdata$SpeciesVarietalCode %in% c("UNKOWN", "DEAD", "Not Recorded")),]
ripdata <- ripdata[ripdata$Woody_DBH_cm > 0, ]
ripdata <- ripdata[ripdata$Woody_Height_m > 0, ]
#ripdata <- droplevel s(ripdata)
ProjLoc <- aggregate(cbind(Longitude,Latitude) ~ ProjCode,data=ripdata, mean)
MeasData <- aggregate(cbind(Woody_DBH_cm,Woody_Height_m) ~ ProjCode,data=ripdata, mean)
#Split SpeciesVarietalName column as a string and extract just the first word. Save to a new column
ripdata$Genus = sapply(strsplit(as.character(ripdata$SpeciesVarietalName), " "), "[[", 1)
#After installing the "plyr" package, we can use "count" to create a dataframe with our frequency data
x <- count(ripdata, 'Genus')
gfreq <- x[order(-x[2]),]
rm(x)
#We can now display 'gfreq' as the frequency table
#Remove all but the first five rows of 'gfreq'
ssgfreq <- head(gfreq,5)
#Step 3 - Test for Independence
ProjCode
ripdata$ProjCode
x <- count(ripdata, 'Genus')
?count
library(plyr)
x <- count(ripdata, 'Genus')
library(plyr)
ripdata <- read.csv("./riparian_survey.csv",header = TRUE, sep = ",")
str(ripdata)
summary(ripdata)
#Assign Project Codes given the Project IDs in ripdata to something easier to parse through
nID <- c("COSRP", "HEROW","NAPSO", "SACTO")
oID <- levels(ripdata$ProjectID)
ripdata$ProjCode <- as.factor(nID[match(ripdata$ProjectID, oID)])
rm (oID, nID)
#remove useless data
ripdata <- ripdata[!grepl("Not Recorded", ripdata$LocationName),]
ripdata <- ripdata[!grepl("Unknown", ripdata$SpeciesVarietalName),]
ripdata <- ripdata[!(ripdata$SpeciesVarietalCode %in% c("UNKOWN", "DEAD", "Not Recorded")),]
ripdata <- ripdata[ripdata$Woody_DBH_cm > 0, ]
ripdata <- ripdata[ripdata$Woody_Height_m > 0, ]
#ripdata <- droplevel s(ripdata)
ProjLoc <- aggregate(cbind(Longitude,Latitude) ~ ProjCode,data=ripdata, mean)
MeasData <- aggregate(cbind(Woody_DBH_cm,Woody_Height_m) ~ ProjCode,data=ripdata, mean)
#Split SpeciesVarietalName column as a string and extract just the first word. Save to a new column
ripdata$Genus = sapply(strsplit(as.character(ripdata$SpeciesVarietalName), " "), "[[", 1)
#After installing the "plyr" package, we can use "count" to create a dataframe with our frequency data
x <- count(ripdata, 'Genus')
gfreq <- x[order(-x[2]),]
rm(x)
#We can now display 'gfreq' as the frequency table
#Remove all but the first five rows of 'gfreq'
ssgfreq <- head(gfreq,5)
#Step 3 - Test for Independence
ProjLoc <- aggregate(cbind(Longitude,Latitude) ~ ProjCode,data=ripdata, mean)
ProjLoc
gfreq
ssgfreq
install.packages("ggplot2")
library(ggplot2)
ProjLoc
MeasData
count(ripdata, 'Genus' ~ ripdata$ProjCode)
table(ripdata$Genus,ripdata$ProjCode)
view(c(count(ripdata, 'Genus'),count(ripdata,'ProjCode')))
View(c(count(ripdata, 'Genus'),count(ripdata,'ProjCode')))
count(ripdata,'ProjCode')
ssgfreq
count(ripdata,ssqfreq$Genus)
ripdata$Genus %in% ssgfreq$Genus
ripdata[ripdata$Genus %in% ssgfreq$Genus),]
ripdata[ripdata$Genus %in% ssgfreq$Genus,]
ssripdata<-ripdata[ripdata$Genus %in% ssgfreq$Genus,]
table(ssripdata$Genus,ssripdata$ProjCode)
twrip <- table(ssripdata$Genus,ssripdata$ProjCode)
chisq.test(twrip)
twrip
crripdata <- chisq.test(twrip)
crripdata
twrip
?minitab
?MINITAB
crripdata.statistic
crripdata.htest
crripdata
crripdata$p.value
ProjLoc
plot(ProjLoc$Longitude, ProjLoc$Latitude)
library(OpenStreetMap)
install.packages(OpenStreetMap)
install.packages('OpenStreetMap')
library(OpenStreetMap)
library(OpenStreetMap)
install.packages(OpenStreetMap)
install.packages('OpenStreetMap')
library(OpenStreetMap)
library(OpenStreetMap)
library(rgdal)
install.packages('rgdal')
install.packages("rgdal")
library(rgdal)
install.packages("rgdal")
install.packages("rgdal")
library(rgdal)
map <- openmap(c(max(ProjLoc$Latitude)+1,min(ProjLoc$Longitude)-1), c(min(ProjLoc$Latitude)-1,max(ProjLoc$Longitude)+1))
library(OpenStreetMap)
library(rgdal)
map <- openmap(c(max(ProjLoc$Latitude)+1,min(ProjLoc$Longitude)-1), c(min(ProjLoc$Latitude)-1,max(ProjLoc$Longitude)+1))
plot(map)
?sapply
plot(ProjLoc$Longitude, ProjLoc$Latitude)
plot(map)
par(new=F)
plot(ProjLoc$Longitude, ProjLoc$Latitude)
plot(map)
par(new=T)
plot(ProjLoc$Longitude, ProjLoc$Latitude)
library(ggmap)
libraryinstall("ggmap")
library.install("ggmap")
library.install('ggmap')
install.packages('ggmap')
install.packages("ggmap")
library(ggmap)
ggmap(get_map(location = c(ProjLoc$Longitude,ProjLoc$Latitude),source = "osm"))
(get_map(location = c(ProjLoc$Longitude,ProjLoc$Latitude),source = "osm")
get_map(location = c(ProjLoc$Longitude,ProjLoc$Latitude),source = "osm")
c(ProjLoc$Longitude,ProjLoc$Latitude)
ProjLoc$Longitude
(ProjLoc$Longitude,ProjLoc$Latitude)
ProjLoc$Longitude,Latitude
subset(ProjLoc, select = c("Longitude","Latitude"))
get_map(location = subset(ProjLoc, select = c("Longitude","Latitude")),source = "osm")
ggmap(get_map(location = subset(ProjLoc, select = c("Longitude","Latitude")),source = "osm"))
ProjLoc
?nrow
sapply(1:nrow(ProjLoc))
sapply(1:nrow(ProjLoc),1:ncol(ProjLoc))
?sapply
plonlat <- subset(ProjLoc, select = c("Longitude","Latitude"))
plot(plonlat)
plot(map,raster = TRUE)
plot(map)
map <- openmap(c(max(ProjLoc$Latitude)+1,min(ProjLoc$Longitude)-1), c(min(ProjLoc$Latitude)-1,max(ProjLoc$Longitude)+1))
library(OpenStreetMap)
map <- openmap(c(max(ProjLoc$Latitude)+1,min(ProjLoc$Longitude)-1), c(min(ProjLoc$Latitude)-1,max(ProjLoc$Longitude)+1))
plot(map)
map <- openmap(c(max(ProjLoc$Latitude)+1,min(ProjLoc$Longitude)-1), c(min(ProjLoc$Latitude)-1,max(ProjLoc$Longitude)+1))
plot(map)
plot(map)
map <- openmap(c(max(ProjLoc$Latitude)+1,min(ProjLoc$Longitude)-1), c(min(ProjLoc$Latitude)-1,max(ProjLoc$Longitude)+1))
library(plyr)
library(ggplot2)
library(OpenStreetMap)
library(rgdal)
plot(map)
map <- openmap(c(max(ProjLoc$Latitude)+1,min(ProjLoc$Longitude)-1), c(min(ProjLoc$Latitude)-1,max(ProjLoc$Longitude)+1))
plot(map)
plot(map)
library(rgdal)
map <- openmap(c(max(ProjLoc$Latitude)+1,min(ProjLoc$Longitude)-1), c(min(ProjLoc$Latitude)-1,max(ProjLoc$Longitude)+1))
plot(map)
library(plyr)
library(ggplot2)
library(OpenStreetMap)
library(rgdal)
ripdata <- read.csv("./riparian_survey.csv",header = TRUE, sep = ",")
str(ripdata)
summary(ripdata)
#Assign Project Codes given the Project IDs in ripdata to something easier to parse through
nID <- c("COSRP", "HEROW","NAPSO", "SACTO")
oID <- levels(ripdata$ProjectID)
ripdata$ProjCode <- as.factor(nID[match(ripdata$ProjectID, oID)])
rm (oID, nID)
#remove useless data
ripdata <- ripdata[!grepl("Not Recorded", ripdata$LocationName),]
ripdata <- ripdata[!grepl("Unknown", ripdata$SpeciesVarietalName),]
ripdata <- ripdata[!(ripdata$SpeciesVarietalCode %in% c("UNKOWN", "DEAD", "Not Recorded")),]
ripdata <- ripdata[ripdata$Woody_DBH_cm > 0, ]
ripdata <- ripdata[ripdata$Woody_Height_m > 0, ]
#ripdata <- droplevel s(ripdata)
ProjLoc <- aggregate(cbind(Longitude,Latitude) ~ ProjCode,data=ripdata, mean)
MeasData <- aggregate(cbind(Woody_DBH_cm,Woody_Height_m) ~ ProjCode,data=ripdata, mean)
#Split SpeciesVarietalName column as a string and extract just the first word. Save to a new column
ripdata$Genus = sapply(strsplit(as.character(ripdata$SpeciesVarietalName), " "), "[[", 1)
#After installing the "plyr" package, we can use "count" to create a dataframe with our frequency data
x <- count(ripdata, 'Genus')
gfreq <- x[order(-x[2]),]
rm(x)
#We can now display 'gfreq' as the frequency table
#Remove all but the first five rows of 'gfreq'
ssgfreq <- head(gfreq,5)
#Step 3 - Test for Independence
#Frequency as a function of Genus and Location
ssripdata<-ripdata[ripdata$Genus %in% ssgfreq$Genus,]
twrip <- table(ssripdata$Genus,ssripdata$ProjCode)
crripdata <- chisq.test(twrip)
plonlat <- subset(ProjLoc, select = c("Longitude","Latitude"))
map <- openmap(c(max(ProjLoc$Latitude)+1,min(ProjLoc$Longitude)-1), c(min(ProjLoc$Latitude)-1,max(ProjLoc$Longitude)+1))
plot(map)
plot(plonlat,add=TRUE)
?plot
spTransform(plonlat,osm())
data(plonlat)
california.tract
plot(map,raster=TRUE)
