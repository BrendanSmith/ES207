source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
ancovaplot(rip.proj.cv.aov.hsd)
ancovaplot(rip$Woody_height_m~rip$Woody_DBH_cm+Genus,data=survey)
ancovaplot(rip$htcm~rip$Woody_DBH_cm+Genus,data=survey)
ancovaplot(rip$htcm~rip$Woody_DBH_cm*Genus,data=survey)
ancovaplot(rip$htcm~rip$Woody_DBH_cm+rip$Genus,data=survey)
ancovaplot(rip$htcm~rip$Woody_DBH_cm,data=survey)
ancovaplot(rip$htcm~rip$Woody_DBH_cm)
ancovaplot(rip$htcm~rip$Woody_DBH_cm,data=survey)
help ancovaplot
?ancovaplot()
ancovaplot(rip$htcm~rip$Woody_DBH_cm*rip$Genus,data=survey)
ancovaplot(rip$htcm~rip$Woody_DBH_cm*rip$Genus,data=survey)
ancovaplot(rip$htcm~rip$Woody_DBH_cm*rip$Genus,data=survey)
plot(rip$htcm~rip$Woody_DBH_cm*rip$Genus)
---
title: "Homework Assignment 4"
author: "Brendan Smith"
date: "March 3, 2016"
output: pdf_document
---
**Objective Statement:** The prupose of this lab is to determine if the linear models we are developing can adequately characterize the biomass found in the studied habitats. Further, we must compare sites and genera, determining which vary more than others. We are building upon previous labs, and developing a full linear model that relates tree height as a function of DBH and site or genus. A new report will be created that shows the model results for the height as a function of DBH and a factor, being site or genus.
**Methods:** We begin by importing the "cleaned" riparian data frame from the previous homework. We are to first detemine if there is a systematic bias in the heigh variation by site, then to use genus as a desired factor. the systematic bias is studied by creating a summary subset that
**Data:**
**Code:**
```{r,echo=FALSE}
# load libraries
library(stats)
library(HH)
# Load Ripdata
rip <- read.csv("newripdata_survey.csv",sep = ",",header = TRUE)
# Add an object that scales the value of height from meters to centimeters
rip$htcm <- rip$Woody_Height_m*100
```
```{r}
#Concatenate ProjCode and Plot.Name using the paste() function, typecast as a factor, then place these factors in rip$projplot
rip$projplot <- as.factor(paste(rip$ProjCode,rip$Plot.Name))
#use tapply() to cycle through each project plot and generate stats
#where ‘htcm’ is height in cm
ripsum <- data.frame(cbind(tapply(rip$htcm,rip$projplot,mean),tapply(rip$htcm,rip$projplot,sd),tapply(rip$htcm,rip$projplot,length)))
#add column names
#(height mean, height standard deviation, number of plots)
colnames(ripsum) <- c("htcmmn","htcmsd","plot.n")
#add a projplot column (from row names) to ripsum
ripsum$projplot <- as.factor(rownames(ripsum))
```
```{r}
#subset for plots with more than one measurement
ripsum <- ripsum[ripsum$plot.n > 1,]
#Add a proj column and populate with the first five letters of projplot (the ProjCode) via the substr() function. Then typecast to factor
ripsum$proj <- as.factor(substr(ripsum$projplot,1,5))
```
We compare the `for` loop operation to the list apply (`lapply`) in order to demonstrate that although the functions have similar outcomes, the list apply is more efficient for evaluating an array of values simultaneously.
```{r}
#create list of project sites
projlevels <- levels(ripsum$proj) #compare a ‘for’ loop of summary
for (p in 1:length(projlevels)) print(summary(ripsum[ripsum$proj == projlevels[p],]))
#with a summary using lapply() (known as list apply)
lapply(projlevels, function(x) summary(ripsum[ripsum$proj == x,]))
```
It can be seen that while the outcome is the same, the setup and application of the for loop is somewhat inefficient in that we must manually indicate the start and stop indeces in order to iterate through the entire array/vector individually with the `for` loop, whereas with the list apply, all elements are evaluated by the function automatically.
We then use `lapply` to randomly select six sample plot summaries from each project site. This is done by by first introducing a variable that is set to the integer 6, the number of samples desired. The function `sample` is then used to output the desired number of samples (6) randomly from each project site. To execute this for all project sites, the `lapply` function is utilized. These values are stored and combined by row using the `rbind()` function along with `do.call()`. Finally, the summary is output.
```{r}
nsamples <- 6 #Set the number of samples
ripres <- lapply(projlevels, function(x) ripsum[which(ripsum$proj == x),][sample(nrow(ripsum[which(ripsum$proj == x),]),nsamples),])
# combine samples by row using rbind()
# and by calling ripres lapply function from do.call()
ripsample <- do.call(rbind,ripres)
summary(ripsample$proj)
```
The coefficient of variation (CV) then added to the summary table by calculating the CV by means of the `with()` function. The `with()` function evaluates an `R` expression (second input term) of the input data (first term). In this case, we are evaluating the coefficient of variation, which is the standard deviation divided by the mean. This value is then stored into our dataframe.
```{r}
#calculate CV using with(data,calc)
ripsample$cv <- with(ripsample, htcmsd / htcmmn)
```
Equipped with the coefficient of variation, we can now run a one-way analysis of variation (ANOVA) on the data frame. This is done by utilizing the `aov` function, which we input the CV as a function of the project code. The output is the sum of squares, degrees of freedom and the residual standard error, all of which are stored in a new variable followed by a summary output.
```{r}
rip.proj.cv.aov = aov(cv~proj,data=ripsample)
summary(rip.proj.cv.aov)
#compare it against
summary.lm(rip.proj.cv.aov)
```
The main differences between the summary of the ANOVA results and the summary of the linear model of the ANOVA is that the lm version yields information regarding the individual project sites and the residuals, whereas the summary of the ANOVA yields information regarding all project sites and residuals, limited to DOF, sum of squares, mean squared, F value and probability.
A Tukey test is performed to check for significant differences between sites, and print out the results. We can see from the print out of the Tukey test and the plot that there is not a significant difference between sites.
```{r}
rip.aov.hsd <- TukeyHSD(rip.proj.cv.aov)
rip.aov.hsd
plot(rip.aov.hsd)
```
In step two we are evaluating the analysis of covariance (ANCOVA), in which we are using the height as a funtion of DBH and genus as a factor.
```{r}
#ancovaplot(rip$htcm~rip$Woody_DBH_cm*rip$Genus,data=survey)
```
**Results:**
Step 1 - Using ANOVA for future model selection
```{r}
plot(ripsum)
```
**Discussion:**
**Limitations:**
cov(rip$Woody_DBH_cm~rip$Genus)
cov(rip$Woody_DBH_cm)
?cov
rip$Woody_DBH_cm~rip$Genus
?lm
lm(rip$Woody_DBH_cm~rip$Genus)
cov(lm(rip$Woody_DBH_cm~rip$Genus))
var(rip$Woody_DBH_cm~rip$Genus)
ripsample
rip
rip$Woody_DBH_cm
var(rip$Woody_DBH_cm)
plot(rip$htcm,rip$Woody_DBH_cm)
plot(rip$htcm,rip$Woody_DBH_cm~rip$Genus)
cov(rip$Woody_DBH_cm,rip$htcm)
plot(rip$htcm,rip$Woody_DBH_cm*rip$Genus)
plot(rip$htcm,rip$Woody_DBH_cm~rip$Genus)
rip$Woody_DBH_cm~rip$Genus
rip$Woody_DBH_cm ~ rip$Genus
rip$htcm~rip$Woody_DBH_cm
lm(rip$htcm~rip$Woody_DBH_cm)
plot(lm(rip$htcm~rip$Woody_DBH_cm))
lm(rip$htcm~rip$Woody_DBH_cm)
lm(rip$htcm~rip$Woody_DBH_cm*rip$Genus)
glm(rip$htcm~rip$Woody_DBH_cm*rip$Genus)
cov(lm(rip$htcm~rip$Woody_DBH_cm))
cov(rip$htcm,rip$Woody_DBH_cm)
cov(rip$htcm,rip$Woody_DBH_cm*rip$Genus)
ancovaplot(rip$htcm~rip$Woody_DBH_cm*rip$Genus)
,data=survey
ancovaplot(rip$htcm~rip$Woody_DBH_cm*rip$Genus,data=survey,)
ancovaplot(rip$htcm~rip$Woody_DBH_cm*rip$Genus,data=survey)
ancovaplot(rip$htcm~rip$Woody_DBH_cm*rip$Genus,data=survey)
ancovaplot(rip$htcm~rip$Woody_DBH_cm*rip$Genus,data=survey)
ancovaplot(lm(rip$htcm~rip$Woody_DBH_cm*rip$Genus),data=survey)
ancovaplot(lm(rip$htcm~rip$Woody_DBH_cm*rip$Genus))
?ancova
ancovaplot(rip$htcm,rip$Woody_DBH_cm*rip$Genus,data=survey)
ancovaplot(rip$htcm,rip$Woody_DBH_cm)
glm(rip$htcm~rip$Woody_DBH_cm)
rip.cov.htdbhg <-glm(rip$htcm~rip$Woody_DBH_cm*rip$Genus)
rip.cov.htdbh <-glm(rip$htcm~rip$Woody_DBH_cm)
plot(rip.cov.htdbh)
plot(rip.cov.htdbhg)
ancovaplot(rip.cov.htdbh)
?ancovaplot
ancovaplot((rip.cov.htdbh))
ancovaplot(rip.cov.htdbh)
ancovaplot(rip$htcm~rip$Woody_DBH_cm*rip$Genus)
ancovaplot(rip$htcm~rip$Woody_DBH_cm*rip$Genus,rip)
ancovaplot(rip$htcm~rip$Woody_DBH_cm*rip$Genus,data = rip)
ancovaplot(rip$htcm~rip$Woody_DBH_cm*rip$Genus,package="HH")
data(rip,package="HH")
data(survey,package="HH")
data(newripdata_survey,package="HH")
data(newripdata_survey.csv,package="HH")
data("newripdata_survey.csv",package="HH")
?data
data(hotdog, package="HH")
hotdog
ancovaplot(Sodium ~ Calories + Type, data=hotdog)
data(ripsum, package="HH")
ancovaplot(rip$htcm~rip$Woody_DBH_cm*rip$Genus,data=ripsum)
ancovaplot(rip$htcm~rip$Woody_DBH_cm*rip$Genus,data=rip)
rip.cov.htdbh <-glm(rip$htcm~rip$Woody_DBH_cm)
rip.cov.htdbh
plot(rip.cov.htdbh)
ancovaplot(rip.cov.htdbh)
summary(rip.cov.htdbh)
rip.cov.htdbh <-glm(rip$htcm~rip$Woody_DBH_cm)
# Generate summary for this model
summary(rip.cov.htdbh)
summary.lm(rip.cov.htdbh)
# Create a linear model for height as a function of DBH and Genus
rip.cov.htdbhg <-glm(rip$htcm~rip$Woody_DBH_cm*rip$Genus)
# Generate summary for this model
summary(rip.cov.htdbhg)
summary.lm(rip.cov.htdbhg)
?HH
glm(rip$htcm~rip$Genus)
rip.cov.htg <-glm(rip$htcm~rip$Genus)
# Generate summary for this model
summary(rip.cov.htg)
summary.lm(rip.cov.htg)
boxplot(rip.cov.htg)
boxplot(rip.cov.htdbh)
boxplot(rip$htcm~rip$Genus)
boxplot(rip$htcm~rip$Woody_DBH_cm)
boxplot(rip$htcm~rip$Woody_DBH_cm*rip$Genus)
results = lm(rip$htcm~rip$Woody_DBH_cm*rip$Genus,data = rip)
results
ancovaplot(results)
ancovaplot(rip$htcm~rip$Woody_DBH_cm*rip$Genus,data = rip)
# Create a linear model for height versus DBH
rip.cov.htdbh <-glm(rip$htcm~rip$Woody_DBH_cm)
# Generate summary for this model
summary(rip.cov.htdbh)
summary.lm(rip.cov.htdbh)
# Create a linear model for height versus Genus
rip.cov.htg <-glm(rip$htcm~rip$Genus)
# Generate summary for this model
summary(rip.cov.htg)
summary.lm(rip.cov.htg)
# Create a linear model for height as a function of DBH and Genus
rip.cov.htdbhg <-glm(rip$htcm~rip$Woody_DBH_cm*rip$Genus)
# Generate summary for this model
summary(rip.cov.htdbhg)
summary.lm(rip.cov.htdbhg)
rip.aov.hsd
?TukeyHSD
plot(rip.aov.hsd)
